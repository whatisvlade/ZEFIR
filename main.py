import asyncio
import os
from flask import Flask
from threading import Thread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

BOT_TOKEN = os.getenv("BOT_TOKEN")

app = Flask('')

@app.route('/')
def home():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Zefir Travel!\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üöå –ê–≤—Ç–æ–±—É—Å–Ω—ã–µ —Ç—É—Ä—ã", callback_data="bus_tours")],
            [InlineKeyboardButton("‚úàÔ∏è –ê–≤–∏–∞ —Ç—É—Ä—ã", callback_data="avia_tours")],
            [InlineKeyboardButton("üõÇ –í–∏–∑—ã", callback_data="visas")],
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data="contact")]
        ])
    )

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "bus_tours":
        await query.edit_message_text(
            "üöå –ê–≤—Ç–æ–±—É—Å–Ω—ã–µ —Ç—É—Ä—ã:\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üåÑüèñÔ∏è –ì—Ä—É–∑–∏—è", callback_data="georgia")],
                [InlineKeyboardButton("üåÑüèñÔ∏è –ê–±—Ö–∞–∑–∏—è", callback_data="abkhazia")],
                [InlineKeyboardButton("üèñÔ∏è –ì–µ–ª–µ–Ω–¥–∂–∏–∫", callback_data="gelendzhik")],
                [InlineKeyboardButton("üåÑ –î–∞–≥–µ—Å—Ç–∞–Ω", callback_data="dagestan")],
                [InlineKeyboardButton("üåâ –ü–∏—Ç–µ—Ä", callback_data="piter")],
                [InlineKeyboardButton("‚ùÑÔ∏è –¢–µ—Ä–∏–±–µ—Ä–∫–∞", callback_data="teriberka")],
                [InlineKeyboardButton("üáßüáæ –ë–µ–ª–∞—Ä—É—Å—å", callback_data="belarus")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )

    elif query.data in ["georgia", "abkhazia", "gelendzhik", "dagestan", "piter", "teriberka", "belarus"]:
        tour_links = {
            "georgia": (
                "–ì—Ä—É–∑–∏—è ‚Äî –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞ —Å –≥–æ—Ä–∞–º–∏, –º–æ—Ä–µ–º –∏ –≤–∏–Ω–æ–º.",
                "https://example.com/georgia",
                "+375 29 123-45-67"  # –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ì—Ä—É–∑–∏–∏
            ),
            "abkhazia": (
                "–ê–±—Ö–∞–∑–∏—è ‚Äî –æ—Ç–¥—ã—Ö –Ω–∞ –ø–æ–±–µ—Ä–µ–∂—å–µ –ß—ë—Ä–Ω–æ–≥–æ –º–æ—Ä—è.",
                "https://example.com/abkhazia",
                "+375 29 234-56-78"
            ),
            "gelendzhik": (
                "–ì–µ–ª–µ–Ω–¥–∂–∏–∫ ‚Äî –∫—É—Ä–æ—Ä—Ç –Ω–∞ –±–µ—Ä–µ–≥—É –ß—ë—Ä–Ω–æ–≥–æ –º–æ—Ä—è.",
                "https://example.com/gelendzhik",
                "+375 29 345-67-89"
            ),
            "dagestan": (
                "–î–∞–≥–µ—Å—Ç–∞–Ω ‚Äî –≥–æ—Ä—ã, –∫—É–ª—å—Ç—É—Ä–∞ –∏ —ç–∫—Å—Ç—Ä–∏–º.",
                "https://example.com/dagestan",
                "+375 29 456-78-90"
            ),
            "piter": (
                "–ü–∏—Ç–µ—Ä (–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥) ‚Äî –∫—É–ª—å—Ç—É—Ä–Ω–∞—è —Å—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏.",
                "https://example.com/piter",
                "+375 29 567-89-01"
            ),
            "teriberka": (
                "–¢–µ—Ä–∏–±–µ—Ä–∫–∞ ‚Äî —Å–µ–≤–µ—Ä, –∫–∏—Ç–æ–≤ –∏ —Å–µ–≤–µ—Ä–Ω–æ–µ —Å–∏—è–Ω–∏–µ.",
                "https://example.com/teriberka",
                "+375 29 678-90-12"
            ),
            "belarus": (
                "–¢—É—Ä—ã –ø–æ –ë–µ–ª–∞—Ä—É—Å–∏ ‚Äî —É—é—Ç, –ø—Ä–∏—Ä–æ–¥–∞ –∏ –∏—Å—Ç–æ—Ä–∏—è.",
                "https://example.com/belarus",
                "+375 29 789-01-23"
            ),
        }
        text, url, manager_phone = tour_links[query.data]
        await query.edit_message_text(
            f"‚úÖ {text}\n\n–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=url)],
                [InlineKeyboardButton("üì± –ö–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", url=f"tel:{manager_phone}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="bus_tours")]
            ])
        )

    elif query.data == "avia_tours":
        await query.edit_message_text(
            "‚úàÔ∏è –ê–≤–∏–∞ —Ç—É—Ä—ã:\n–¢—É—Ç –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤–∏–∞–ø–µ—Ä–µ–ª–µ—Ç–∞—Ö (–∑–∞–≥–ª—É—à–∫–∞)",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )

    elif query.data == "visas":
        await query.edit_message_text(
            "üõÇ –í–∏–∑—ã:\n–¢—É—Ç –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∏–∑–∞–º (–∑–∞–≥–ª—É—à–∫–∞)",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )

    elif query.data == "contact":
        await query.edit_message_text(
            "üìû –°–≤—è–∑–∞—Ç—å—Å—è:\n–¢–µ–ª–µ—Ñ–æ–Ω: +375 29 000-00-00\nEmail: info@zefir.travel",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )

    elif query.data == "back_to_menu":
        await query.edit_message_text(
            f"–ü—Ä–∏–≤–µ—Ç, {query.from_user.first_name}! üëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Zefir Travel!\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üöå –ê–≤—Ç–æ–±—É—Å–Ω—ã–µ —Ç—É—Ä—ã", callback_data="bus_tours")],
                [InlineKeyboardButton("‚úàÔ∏è –ê–≤–∏–∞ —Ç—É—Ä—ã", callback_data="avia_tours")],
                [InlineKeyboardButton("üõÇ –í–∏–∑—ã", callback_data="visas")],
                [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data="contact")]
            ])
        )

async def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_button))
    keep_alive()
    await application.run_polling()

if __name__ == '__main__':
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())
